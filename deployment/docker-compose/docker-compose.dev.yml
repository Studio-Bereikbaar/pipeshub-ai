services:
  pipeshub-ai:
    build:
      context: .
      dockerfile: deployment/docker-compose/Dockerfile
      args:
        # Development VITE URLs - using server IP with different port
        VITE_SERVER_URL: http://85.214.63.233:3001
        VITE_AUTH_URL: http://85.214.63.233:3001
        VITE_BACKEND_URL: http://85.214.63.233:3001
        VITE_IAM_URL: http://85.214.63.233:3001
    restart: always
    ports:
      # Development ports - different from production
      - "8092:8091"  # Indexing backend (dev port)
      - "8089:8088"  # Connector backend (dev port)
      - "3001:3000"  # Main app (dev port)
      - "8002:8000"  # Query backend (dev port)
    environment:
      # Core environment settings
      - NODE_ENV=${NODE_ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-}

      # Security settings - development secret
      - SECRET_KEY=${SECRET_KEY:-dev_random_encryption_secret_key}

      # Public endpoints - development URLs
      - CONNECTOR_PUBLIC_BACKEND=${CONNECTOR_PUBLIC_BACKEND:-http://85.214.63.233:8089}
      - FRONTEND_PUBLIC_URL=${FRONTEND_PUBLIC_URL:-http://85.214.63.233:3001}

      # Internal service URLs
      - QUERY_BACKEND=http://localhost:8000
      - CONNECTOR_BACKEND=http://localhost:8088
      - INDEXING_BACKEND=http://localhost:8091

      # ETCD config
      - ETCD_URL=http://etcd:2379
      - ETCD_HOST=etcd

      # ArangoDB config
      - ARANGO_URL=http://arango:8529
      - ARANGO_DB_NAME=es_dev
      - ARANGO_USERNAME=root
      - ARANGO_PASSWORD=${ARANGO_PASSWORD:-dev_arango_password}

      # Kafka config
      - KAFKA_BROKERS=kafka-1:9092

      # Redis config
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-dev_redis_password}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev_redis_password}@redis:6379

      # MongoDB config
      - MONGO_URI=mongodb://${MONGO_USERNAME:-admin}:${MONGO_PASSWORD:-dev_mongo_password}@mongodb:27017/?authSource=admin
      - MONGO_DB_NAME=es_dev

      # Qdrant config
      - QDRANT_API_KEY=${QDRANT_API_KEY:-dev_qdrant_secret_api_key}
      - QDRANT_HOST=qdrant
      - QDRANT_GRPC_PORT=6334
      - QDRANT_PORT=6333

      - OLLAMA_API_URL=http://host.docker.internal:11434
    depends_on:
      qdrant:
        condition: service_healthy
      kafka-1:
        condition: service_started
      redis:
        condition: service_started
      mongodb:
        condition: service_started
      etcd:
        condition: service_started
      arango:
        condition: service_started
    volumes:
      - pipeshub_data_dev:/data/pipeshub
      - pipeshub_root_local_dev:/root/.local

    extra_hosts:
      - "host.docker.internal:host-gateway"

  mongodb:
    image: mongo:8.0.6
    restart: always
    ports:
      - "27018:27017"  # Different port for development
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-dev_mongo_password}
    volumes:
      - mongodb_data_dev:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 3s
      retries: 5

  redis:
    image: redis:bookworm
    container_name: redis-dev
    restart: always
    ports:
      - "6380:6379"  # Different port for development
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-dev_redis_password}
    command: >
      ${REDIS_PASSWORD:+--requirepass ${REDIS_PASSWORD}}
    volumes:
      - redis_data_dev:/data

  arango:
    image: arangodb:3.12.4
    restart: always
    ports:
      - "8530:8529"  # Different port for development
    environment:
      - ARANGO_ROOT_PASSWORD=${ARANGO_PASSWORD:-dev_arango_password}
    volumes:
      - arango_data_dev:/var/lib/arangodb3
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8529/_api/version"]
      interval: 5s
      timeout: 3s
      retries: 5

  etcd:
    image: quay.io/coreos/etcd:v3.5.17
    restart: always
    ports:
      - "2390:2379"  # Different port for development (avoiding 2380 conflict)
      - "2391:2380"  # Different port for development
    command: >
      etcd
      --name etcd-node
      --data-dir /etcd-data
      --listen-client-urls http://0.0.0.0:2379
      --advertise-client-urls http://0.0.0.0:2379
      --listen-peer-urls http://0.0.0.0:2380
      --initial-advertise-peer-urls http://0.0.0.0:2380
      --initial-cluster etcd-node=http://0.0.0.0:2380
    volumes:
      - etcd_data_dev:/etcd-data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    restart: always
    ports:
      - "2182:2181"  # Different port for development
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000

  kafka-1:
    image: confluentinc/cp-kafka:7.9.0
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9093:9092"  # Different port for development
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=ACCESS:PLAINTEXT
      - KAFKA_LISTENERS=ACCESS://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=ACCESS://kafka-1:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=ACCESS
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_CREATE_TOPICS=record-events:1:1,entity-events:1:1,sync-events:1:1
      - KAFKA_LOG_RETENTION_HOURS=24
      - KAFKA_NUM_NETWORK_THREADS=3
      - KAFKA_NUM_IO_THREADS=8

  qdrant:
    image: qdrant/qdrant:v1.13.6
    ports:
      - "6335:6333"  # Different port for development
      - "6336:6334"  # Different port for development
    environment:
      - QDRANT__SERVICE__API_KEY=${QDRANT_API_KEY:-dev_qdrant_secret_api_key}
    volumes:
      - qdrant_storage_dev:/qdrant/storage
    ulimits:
      nofile:
        soft: 50000
        hard: 50000
    restart: always
    healthcheck:
      test:
        - CMD-SHELL
        - bash -c ':> /dev/tcp/127.0.0.1/6333' || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  mongodb_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  arango_data_dev:
    driver: local
  etcd_data_dev:
    driver: local
  qdrant_storage_dev:
    driver: local
  pipeshub_data_dev:
    driver: local
  pipeshub_root_local_dev:
    driver: local